// DO NOT EDIT
// Generated by JFlex 1.8.1 http://jflex.de/
// source: ScannerFlex.flex

package Lexical;
import java.util.LinkedHashSet;
import Syntax.Lexical;
import java.io.IOException;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class LexicalAnalyzer implements Lexical{

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHAR = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\3\u1f00"+
    "\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u1f00\1\u4a00\1\u1f00\1\u4b00\1\u4c00\2\u1f00\3\u0100"+
    "\1\u4d00\1\u4e00\1\u4f00\12\u1f00\4\u0100\1\u5000\17\u1f00\2\u0100"+
    "\1\u5100\41\u1f00\2\u0100\1\u5200\1\u5300\3\u1f00\1\u5400\27\u0100"+
    "\1\u5500\2\u0100\1\u5600\45\u1f00\1\u0100\1\u5700\1\u5800\11\u1f00"+
    "\1\u5900\24\u1f00\1\u5a00\1\u5b00\1\u1f00\1\u5c00\1\u5d00\1\u5e00"+
    "\1\u5f00\2\u1f00\1\u6000\5\u1f00\1\u6100\7\u1f00\1\u6200\1\u6300"+
    "\4\u1f00\1\u6400\21\u1f00\246\u0100\1\u6500\20\u0100\1\u6600\1\u6700"+
    "\25\u0100\1\u6800\34\u0100\1\u6900\14\u1f00\2\u0100\1\u6a00\u0b05\u1f00"+
    "\1\u6b00\1\u6c00\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6" +
            "\1\1\1\7\1\10\1\6\1\11\1\12\1\13\1\14" +
            "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24" +
            "\1\25\11\26\1\27\1\30\1\31\1\32\1\33\2\6" +
            "\5\34\1\35\5\11\1\36\13\11\1\37\2\11\1\40" +
            "\1\41\1\42\1\43\1\11\1\6\1\44\1\45\1\46" +
            "\1\47\1\50\1\51\1\52\1\53\1\54\1\11\1\55" +
            "\1\56\1\11\1\57\1\60\1\61\1\11\1\62\1\63" +
            "\1\64\1\65\1\66\1\67\1\70\1\11\1\71\1\72" +
            "\1\73\1\74\1\75\6\0\1\76\32\0\2\6\4\11" +
            "\4\6\1\11\2\6\1\0\7\6\1\11\4\6\1\11" +
            "\5\6\27\11\1\6\37\11\1\6\u01ca\11\4\6\14\11" +
            "\16\6\5\11\7\6\1\11\1\6\1\11\21\6\160\0" +
            "\5\11\1\6\2\11\2\6\4\11\1\6\1\11\6\6" +
            "\1\11\1\6\3\11\1\6\1\11\1\6\24\11\1\6" +
            "\123\11\1\6\213\11\1\6\5\0\2\6\246\11\1\6" +
            "\46\11\2\6\1\11\7\6\47\11\7\6\1\11\1\6" +
            "\55\0\1\6\1\0\1\6\2\0\1\6\2\0\1\6" +
            "\1\0\10\6\33\11\5\6\3\11\15\6\6\0\5\6" +
            "\1\11\4\6\13\0\1\6\1\0\3\6\53\11\37\0" +
    "\4\6\2\11\1\0\143\11\1\6\1\11\10\0\1\6"+
    "\6\0\2\11\2\0\1\6\4\0\2\11\12\0\3\11"+
    "\2\6\1\11\17\6\1\0\1\11\1\0\36\11\33\0"+
    "\2\6\131\11\13\0\1\11\16\6\12\0\41\11\11\0"+
    "\2\11\4\6\1\11\5\6\26\11\4\0\1\11\11\0"+
    "\1\11\3\0\1\11\5\0\22\6\31\11\3\0\4\6"+
    "\13\11\65\6\25\11\1\6\10\11\26\6\60\0\66\11"+
    "\3\0\1\11\22\0\1\11\7\0\12\11\2\0\2\6"+
    "\12\0\1\6\20\11\3\0\1\6\10\11\2\6\2\11"+
    "\2\6\26\11\1\6\7\11\1\6\1\11\3\6\4\11"+
    "\2\6\1\0\1\11\7\0\2\6\2\0\2\6\3\0"+
    "\1\11\10\6\1\0\4\6\2\11\1\6\3\11\2\0"+
    "\2\6\12\0\4\11\7\6\2\11\4\6\3\0\1\6"+
    "\6\11\4\6\2\11\2\6\26\11\1\6\7\11\1\6"+
    "\2\11\1\6\2\11\1\6\2\11\2\6\1\0\1\6"+
    "\5\0\4\6\2\0\2\6\3\0\3\6\1\0\7\6"+
    "\4\11\1\6\1\11\7\6\14\0\3\11\1\0\13\6"+
    "\3\0\1\6\11\11\1\6\3\11\1\6\26\11\1\6"+
    "\7\11\1\6\2\11\1\6\5\11\2\6\1\0\1\11"+
    "\10\0\1\6\3\0\1\6\3\0\2\6\1\11\17\6"+
    "\2\11\2\0\2\6\12\0\1\6\1\11\7\6\1\11"+
    "\6\0\1\6\3\0\1\6\10\11\2\6\2\11\2\6"+
    "\26\11\1\6\7\11\1\6\2\11\1\6\5\11\2\6"+
    "\1\0\1\11\7\0\2\6\2\0\2\6\3\0\10\6"+
    "\2\0\4\6\2\11\1\6\3\11\2\0\2\6\12\0"+
    "\1\6\1\11\20\6\1\0\1\11\1\6\6\11\3\6"+
    "\3\11\1\6\4\11\3\6\2\11\1\6\1\11\1\6"+
    "\2\11\3\6\2\11\3\6\3\11\3\6\14\11\4\6"+
    "\5\0\3\6\3\0\1\6\4\0\2\6\1\11\6\6"+
    "\1\0\16\6\12\0\11\6\1\11\6\6\4\0\1\6"+
    "\10\11\1\6\3\11\1\6\27\11\1\6\20\11\3\6"+
    "\1\11\7\0\1\6\3\0\1\6\4\0\7\6\2\0"+
    "\1\6\3\11\5\6\2\11\2\0\2\6\12\0\20\6"+
    "\1\11\3\0\1\6\10\11\1\6\3\11\1\6\27\11"+
    "\1\6\12\11\1\6\5\11\2\6\1\0\1\11\7\0"+
    "\1\6\3\0\1\6\4\0\7\6\2\0\7\6\1\11"+
    "\1\6\2\11\2\0\2\6\12\0\1\6\2\11\15\6"+
    "\4\0\1\6\10\11\1\6\3\11\1\6\51\11\2\0"+
    "\1\11\7\0\1\6\3\0\1\6\4\0\1\11\5\6"+
    "\3\11\1\0\7\6\3\11\2\0\2\6\12\0\12\6"+
    "\6\11\2\6\2\0\1\6\22\11\3\6\30\11\1\6"+
    "\11\11\1\6\1\11\2\6\7\11\3\6\1\0\4\6"+
    "\6\0\1\6\1\0\1\6\10\0\6\6\12\0\2\6"+
    "\2\0\15\6\60\11\1\0\2\11\7\0\4\6\10\11"+
    "\10\0\1\6\12\0\47\6\2\11\1\6\1\11\2\6"+
    "\2\11\1\6\1\11\2\6\1\11\6\6\4\11\1\6"+
    "\7\11\1\6\3\11\1\6\1\11\1\6\1\11\2\6"+
    "\2\11\1\6\4\11\1\0\2\11\6\0\1\6\2\0"+
    "\1\11\2\6\5\11\1\6\1\11\1\6\6\0\2\6"+
    "\12\0\2\6\4\11\40\6\1\11\27\6\2\0\6\6"+
    "\12\0\13\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\2\0\10\11\1\6\44\11\4\6\24\0\1\6\2\0"+
    "\5\11\13\0\1\6\44\0\11\6\1\0\71\6\53\11"+
    "\24\0\1\11\12\0\6\6\6\11\4\0\4\11\3\0"+
    "\1\11\3\0\2\11\7\0\3\11\4\0\15\11\14\0"+
    "\1\11\17\0\2\6\46\11\1\6\1\11\5\6\1\11"+
    "\2\6\53\11\1\6\115\11\1\6\4\11\2\6\7\11"+
    "\1\6\1\11\1\6\4\11\2\6\51\11\1\6\4\11"+
    "\2\6\41\11\1\6\4\11\2\6\7\11\1\6\1\11"+
    "\1\6\4\11\2\6\17\11\1\6\71\11\1\6\4\11"+
    "\2\6\103\11\2\6\3\0\40\6\20\11\20\6\126\11"+
    "\2\6\6\11\3\6\u016c\11\2\6\21\11\1\6\32\11"+
    "\5\6\113\11\3\6\13\11\7\6\15\11\1\6\4\11"+
    "\3\0\13\6\22\11\3\0\13\6\22\11\2\0\14\6"+
    "\15\11\1\6\3\11\1\6\2\0\14\6\64\11\40\0"+
    "\3\6\1\11\3\6\2\11\1\0\2\6\12\0\41\6"+
    "\4\0\1\6\12\0\6\6\130\11\10\6\5\11\2\0"+
    "\42\11\1\0\1\11\5\6\106\11\12\6\37\11\1\6"+
    "\14\0\4\6\14\0\12\6\12\0\36\11\2\6\5\11"+
    "\13\6\54\11\4\6\32\11\6\6\12\0\46\6\27\11"+
    "\5\0\4\6\65\11\12\0\1\6\35\0\2\6\13\0"+
    "\6\6\12\0\15\6\1\11\10\6\16\0\102\6\5\0"+
    "\57\11\21\0\7\11\4\6\12\0\21\6\11\0\14\6"+
    "\3\0\36\11\15\0\2\11\12\0\54\11\16\0\14\6"+
    "\44\11\24\0\10\6\12\0\3\6\3\11\12\0\44\11"+
    "\2\6\11\11\107\6\3\0\1\6\25\0\4\11\1\0"+
    "\4\11\3\0\2\11\3\0\6\6\300\11\72\0\1\6"+
    "\5\0\26\11\2\6\6\11\2\6\46\11\2\6\6\11"+
    "\2\6\10\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\37\11\2\6\65\11\1\6\7\11\1\6\1\11"+
    "\3\6\3\11\1\6\7\11\3\6\4\11\2\6\6\11"+
    "\4\6\15\11\5\6\3\11\1\6\7\11\16\6\5\0"+
    "\30\6\2\3\5\0\20\6\2\11\23\6\1\11\13\6"+
    "\5\0\1\6\12\0\1\6\1\11\15\6\1\11\20\6"+
    "\15\11\3\6\40\11\20\6\15\0\4\6\1\0\3\6"+
    "\14\0\21\6\1\11\4\6\1\11\2\6\12\11\1\6"+
    "\1\11\3\6\5\11\6\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\4\11\1\6\13\11\2\6\4\11\5\6"+
    "\5\11\4\6\1\11\21\6\51\11\u0177\6\57\11\1\6"+
    "\57\11\1\6\205\11\6\6\4\11\3\0\2\11\14\6"+
    "\46\11\1\6\1\11\5\6\1\11\2\6\70\11\7\6"+
    "\1\11\17\6\1\0\27\11\11\6\7\11\1\6\7\11"+
    "\1\6\7\11\1\6\7\11\1\6\7\11\1\6\7\11"+
    "\1\6\7\11\1\6\7\11\1\6\40\0\57\6\1\11"+
    "\325\6\3\11\31\6\11\11\6\0\1\6\5\11\2\6"+
    "\5\11\4\6\126\11\2\6\2\0\2\6\3\11\1\6"+
    "\132\11\1\6\4\11\5\6\52\11\2\6\136\11\21\6"+
    "\33\11\65\6\306\11\112\6\353\11\25\6\215\11\103\6"+
    "\56\11\2\6\15\11\3\6\20\11\12\0\2\11\24\6"+
    "\57\11\1\0\4\6\12\0\1\6\37\11\2\0\120\11"+
    "\2\0\45\6\11\11\2\6\147\11\2\6\44\11\1\6"+
    "\10\11\77\6\13\11\1\0\3\11\1\0\4\11\1\0"+
    "\27\11\5\0\20\6\1\11\7\6\64\11\14\6\2\0"+
    "\62\11\22\0\12\6\12\0\6\6\22\0\6\11\3\6"+
    "\1\11\1\6\1\11\2\6\12\0\34\11\10\0\2\6"+
    "\27\11\15\0\14\6\35\11\3\6\4\0\57\11\16\0"+
    "\16\6\1\11\12\0\6\6\5\11\1\0\12\11\12\0"+
    "\5\11\1\6\51\11\16\0\11\6\3\11\1\0\10\11"+
    "\2\0\2\6\12\0\6\6\27\11\3\6\1\11\3\0"+
    "\62\11\1\0\1\11\3\0\2\11\2\0\5\11\2\0"+
    "\1\11\1\0\1\11\30\6\3\11\2\6\13\11\5\0"+
    "\2\6\3\11\2\0\12\6\6\11\2\6\6\11\2\6"+
    "\6\11\11\6\7\11\1\6\7\11\1\6\53\11\1\6"+
    "\12\11\12\6\163\11\10\0\1\6\2\0\2\6\12\0"+
    "\6\6\244\11\14\6\27\11\4\6\61\11\4\6\u0100\3"+
    "\156\11\2\6\152\11\46\6\7\11\14\6\5\11\5\6"+
    "\1\11\1\0\12\11\1\6\15\11\1\6\5\11\1\6"+
    "\1\11\1\6\2\11\1\6\2\11\1\6\154\11\41\6"+
    "\153\11\22\6\100\11\2\6\66\11\50\6\15\11\3\6"+
    "\20\0\20\6\20\0\3\6\2\11\30\6\3\11\31\6"+
    "\1\11\6\6\5\11\1\6\207\11\2\6\1\0\4\6"+
    "\1\11\13\6\12\0\7\6\32\11\4\6\1\11\1\6"+
    "\32\11\13\6\131\11\3\6\6\11\2\6\6\11\2\6"+
    "\6\11\2\6\3\11\3\6\2\11\3\6\2\11\22\6"+
    "\3\0\4\6\14\11\1\6\32\11\1\6\23\11\1\6"+
    "\2\11\1\6\17\11\2\6\16\11\42\6\173\11\105\6"+
    "\65\11\210\6\1\0\202\6\35\11\3\6\61\11\17\6"+
    "\1\0\37\6\40\11\15\6\36\11\5\6\46\11\5\0"+
    "\5\6\36\11\2\6\44\11\4\6\10\11\1\6\5\11"+
    "\52\6\236\11\2\6\12\0\6\6\44\11\4\6\44\11"+
    "\4\6\50\11\10\6\64\11\234\6\67\11\11\6\26\11"+
    "\12\6\10\11\230\6\6\11\2\6\1\11\1\6\54\11"+
    "\1\6\2\11\3\6\1\11\2\6\27\11\12\6\27\11"+
    "\11\6\37\11\101\6\23\11\1\6\2\11\12\6\26\11"+
    "\12\6\32\11\106\6\70\11\6\6\2\11\100\6\1\11"+
    "\3\0\1\6\2\0\5\6\4\0\4\11\1\6\3\11"+
    "\1\6\33\11\4\6\3\0\4\6\1\0\40\6\35\11"+
    "\3\6\35\11\43\6\10\11\1\6\34\11\2\0\31\6"+
    "\66\11\12\6\26\11\12\6\23\11\15\6\22\11\156\6"+
    "\111\11\67\6\63\11\15\6\63\11\15\6\3\0\65\11"+
    "\17\0\37\6\12\0\17\6\4\0\55\11\13\0\2\6"+
    "\1\0\22\6\31\11\7\6\12\0\6\6\3\0\44\11"+
    "\16\0\1\6\12\0\20\6\43\11\1\0\2\6\1\11"+
    "\11\6\3\0\60\11\16\0\4\11\5\6\3\0\3\6"+
    "\12\0\1\11\1\6\1\11\43\6\22\11\1\6\31\11"+
    "\14\0\6\6\1\0\101\6\7\11\1\6\1\11\1\6"+
    "\4\11\1\6\17\11\1\6\12\11\7\6\57\11\14\0"+
    "\5\6\12\0\6\6\4\0\1\6\10\11\2\6\2\11"+
    "\2\6\26\11\1\6\7\11\1\6\2\11\1\6\5\11"+
    "\2\6\1\0\1\11\7\0\2\6\2\0\2\6\3\0"+
    "\2\6\1\11\6\6\1\0\5\6\5\11\2\0\2\6"+
    "\7\0\3\6\5\0\213\6\65\11\22\0\4\11\5\6"+
    "\12\0\46\6\60\11\24\0\2\11\1\6\1\11\10\6"+
    "\12\0\246\6\57\11\7\0\2\6\11\0\27\6\4\11"+
    "\2\0\42\6\60\11\21\0\3\6\1\11\13\6\12\0"+
    "\46\6\53\11\15\0\10\6\12\0\66\6\32\11\3\6"+
    "\17\0\4\6\12\0\u0166\6\100\11\12\0\25\6\2\11"+
    "\12\0\50\11\7\0\1\11\4\0\10\6\1\0\10\6"+
    "\1\11\13\0\50\11\2\6\4\11\20\0\46\6\71\11"+
    "\7\6\11\11\1\6\45\11\10\0\1\6\10\0\1\11"+
    "\17\6\12\0\30\6\36\11\2\6\26\0\1\6\16\0"+
    "\111\6\7\11\1\6\2\11\1\6\46\11\6\0\3\6"+
    "\1\0\1\6\2\0\1\6\7\0\1\11\1\0\10\6"+
    "\12\0\246\6\232\11\146\6\157\11\21\6\304\11\274\6"+
    "\57\11\321\6\107\11\271\6\71\11\7\6\37\11\1\6"+
    "\12\0\146\6\36\11\2\6\5\0\13\6\60\11\7\0"+
    "\11\6\4\11\14\6\12\0\11\6\25\11\5\6\23\11"+
    "\160\6\105\11\13\6\1\11\56\0\20\6\4\0\15\11"+
    "\100\6\2\11\36\6\355\11\23\6\363\11\15\6\37\11"+
    "\121\6\u018c\11\4\6\153\11\5\6\15\11\3\6\11\11"+
    "\7\6\12\11\3\6\2\0\1\6\4\0\301\6\5\0"+
    "\3\6\26\0\2\6\7\0\36\6\4\0\224\6\3\0"+
    "\273\6\125\11\1\6\107\11\1\6\2\11\2\6\1\11"+
    "\2\6\2\11\2\6\4\11\1\6\14\11\1\6\1\11"+
    "\1\6\7\11\1\6\101\11\1\6\4\11\2\6\10\11"+
    "\1\6\7\11\1\6\34\11\1\6\4\11\1\6\5\11"+
    "\1\6\1\11\3\6\7\11\1\6\u0154\11\2\6\31\11"+
    "\1\6\31\11\1\6\37\11\1\6\31\11\1\6\37\11"+
    "\1\6\31\11\1\6\37\11\1\6\31\11\1\6\37\11"+
    "\1\6\31\11\1\6\10\11\2\6\151\0\4\6\62\0"+
    "\10\6\1\0\16\6\1\0\26\6\5\0\1\6\17\0"+
    "\120\6\7\0\1\6\21\0\2\6\7\0\1\6\2\0"+
    "\1\6\5\0\325\6\305\11\13\6\7\0\51\6\104\11"+
    "\7\0\5\6\12\0\246\6\4\11\1\6\33\11\1\6"+
    "\2\11\1\6\1\11\2\6\1\11\1\6\12\11\1\6"+
    "\4\11\1\6\1\11\1\6\1\11\6\6\1\11\4\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\3\11\1\6"+
    "\2\11\1\6\1\11\2\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\2\11\1\6"+
    "\1\11\2\6\4\11\1\6\7\11\1\6\4\11\1\6"+
    "\4\11\1\6\1\11\1\6\12\11\1\6\21\11\5\6"+
    "\3\11\1\6\5\11\1\6\21\11\104\6\327\11\51\6"+
    "\65\11\13\6\336\11\2\6\u0182\11\16\6\u0131\11\37\6"+
    "\36\11\343\6\1\0\36\6\140\0\200\6\360\0\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27904];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
          "\3\0\1\1\1\2\2\3\1\1\1\4\1\5\1\6" +
                  "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16" +
                  "\1\17\1\20\2\21\1\22\1\23\1\24\1\25\1\26" +
                  "\1\27\1\30\1\31\23\5\1\32\1\33\1\34\1\35" +
                  "\1\36\2\37\1\40\1\1\1\41\1\42\1\1\1\43" +
                  "\1\44\1\45\1\46\1\47\1\0\1\50\1\51\1\0" +
                  "\1\52\1\53\1\51\1\54\1\55\2\0\1\56\1\57" +
                  "\1\60\1\61\11\5\1\62\7\5\1\63\1\64\4\5" +
                  "\1\65\1\66\13\5\1\67\1\36\1\0\2\52\2\70" +
                  "\1\0\2\71\1\72\12\5\1\73\2\5\1\74\3\5" +
                  "\1\75\1\76\1\5\1\77\1\100\17\5\1\101\1\70" +
                  "\1\0\1\102\1\5\1\103\1\5\1\104\4\5\1\105" +
                  "\4\5\1\106\13\5\1\107\1\5\1\110\2\5\1\70" +
                  "\1\111\1\112\1\113\3\5\1\114\2\5\1\115\6\5" +
                  "\1\116\3\5\1\117\1\5\1\120\1\70\5\5\1\121" +
                  "\1\122\1\123\1\124\1\125\1\126\1\127\1\5\1\70" +
                  "\1\5\1\130\1\131\1\5\1\132\1\5\1\70\1\133" +
                  "\1\134\1\135\2\70";

  private static int [] zzUnpackAction() {
    int[] result = new int[251];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
          "\0\0\0\77\0\176\0\275\0\275\0\275\0\374\0\u013b" +
                  "\0\275\0\u017a\0\275\0\275\0\275\0\275\0\275\0\u01b9" +
                  "\0\u01f8\0\275\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\275" +
                  "\0\275\0\u0372\0\u03b1\0\u03f0\0\275\0\u042f\0\275\0\u046e" +
                  "\0\u04ad\0\u04ec\0\u052b\0\u056a\0\u05a9\0\u05e8\0\u0627\0\u0666" +
                  "\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u07e0\0\u081f\0\u085e" +
                  "\0\u089d\0\u08dc\0\275\0\275\0\275\0\275\0\u091b\0\275" +
                  "\0\u095a\0\275\0\u0999\0\275\0\275\0\u09d8\0\275\0\275" +
                  "\0\275\0\275\0\275\0\u0276\0\275\0\u0a17\0\u0a56\0\u0a95" +
                  "\0\275\0\u0ad4\0\u0b13\0\275\0\u0b52\0\u0b91\0\275\0\275" +
                  "\0\275\0\275\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b" +
                  "\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03" +
                  "\0\u0f42\0\u0f81\0\u0fc0\0\u017a\0\u0fff\0\u103e\0\u107d\0\u10bc" +
                  "\0\u10fb\0\u017a\0\u017a\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u1236" +
                  "\0\u1275\0\u12b4\0\u12f3\0\u1332\0\u1371\0\u13b0\0\275\0\275" +
                  "\0\u13ef\0\275\0\u142e\0\u0b52\0\u146d\0\u14ac\0\275\0\u14eb" +
                  "\0\u017a\0\u152a\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665\0\u16a4" +
                  "\0\u16e3\0\u1722\0\u1761\0\u017a\0\u17a0\0\u17df\0\u181e\0\u185d" +
                  "\0\u189c\0\u18db\0\u017a\0\u017a\0\u191a\0\u017a\0\u017a\0\u1959" +
                  "\0\u1998\0\u19d7\0\u1a16\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u1b51" +
                  "\0\u1b90\0\u1bcf\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb\0\u017a\0\u1d0a" +
                  "\0\u1d49\0\u017a\0\u1d88\0\u017a\0\u1dc7\0\u017a\0\u1e06\0\u1e45" +
                  "\0\u1e84\0\u1ec3\0\u017a\0\u1f02\0\u1f41\0\u1f80\0\u1fbf\0\u017a" +
                  "\0\u1ffe\0\u203d\0\u207c\0\u20bb\0\u20fa\0\u2139\0\u2178\0\u21b7" +
                  "\0\u21f6\0\u2235\0\u2274\0\u017a\0\u22b3\0\u017a\0\u22f2\0\u2331" +
                  "\0\u2370\0\u017a\0\u017a\0\u017a\0\u23af\0\u23ee\0\u242d\0\u017a" +
                  "\0\u246c\0\u24ab\0\u017a\0\u24ea\0\u2529\0\u2568\0\u25a7\0\u25e6" +
                  "\0\u2625\0\u017a\0\u2664\0\u26a3\0\u26e2\0\u017a\0\u2721\0\u017a" +
                  "\0\u2760\0\u279f\0\u27de\0\u281d\0\u285c\0\u289b\0\u017a\0\u017a" +
                  "\0\u017a\0\u017a\0\u017a\0\u017a\0\u017a\0\u28da\0\u2919\0\u2958" +
                  "\0\u017a\0\u017a\0\u2997\0\u017a\0\u29d6\0\u2a15\0\u017a\0\u017a" +
                  "\0\u017a\0\u2a54\0\275";

  private static int [] zzUnpackRowMap() {
    int[] result = new int[251];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
          "\1\4\1\5\1\6\1\4\1\5\1\7\1\4\1\10" +
                  "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20" +
                  "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30" +
                  "\1\31\1\32\1\33\1\34\4\12\1\35\1\4\1\36" +
                  "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46" +
                  "\1\12\1\47\1\12\1\50\1\51\1\52\1\53\1\54" +
                  "\1\55\1\56\1\57\1\60\1\61\1\62\1\12\1\63" +
                  "\1\64\1\65\1\66\1\4\2\67\1\70\2\67\1\71" +
                  "\2\67\1\72\30\67\1\73\35\67\2\74\1\70\2\74" +
                  "\1\71\6\74\1\75\24\74\1\76\35\74\101\0\1\6" +
                  "\126\0\1\77\44\0\1\12\10\0\1\12\13\0\2\12" +
                  "\5\0\4\12\4\0\26\12\4\0\1\12\32\0\1\100" +
                  "\64\0\1\101\11\0\1\102\66\0\1\103\1\104\1\0" +
                  "\1\26\1\27\3\0\1\105\71\0\2\106\67\0\1\107" +
                  "\4\0\1\110\5\0\1\111\67\0\1\106\1\0\2\112" +
                  "\6\0\1\113\1\114\1\115\10\0\1\116\1\113\4\0" +
                  "\1\114\11\0\1\115\31\0\1\106\1\0\2\27\6\0" +
                  "\1\113\1\114\11\0\1\116\1\113\4\0\1\114\52\0" +
                  "\1\117\76\0\1\120\76\0\1\121\104\0\1\122\36\0" +
                  "\1\12\10\0\1\12\13\0\2\12\5\0\4\12\4\0" +
                  "\13\12\1\123\5\12\1\124\4\12\4\0\2\12\10\0" +
                  "\1\12\13\0\2\12\5\0\4\12\4\0\4\12\1\125" +
                  "\7\12\1\126\1\12\1\127\7\12\4\0\2\12\10\0" +
                  "\1\12\13\0\2\12\5\0\4\12\4\0\1\130\6\12" +
                  "\1\131\4\12\1\132\11\12\4\0\2\12\10\0\1\12" +
                  "\13\0\2\12\5\0\4\12\4\0\4\12\1\133\7\12" +
                  "\1\134\11\12\4\0\2\12\10\0\1\12\13\0\2\12" +
                  "\5\0\4\12\4\0\12\12\1\135\1\136\12\12\4\0" +
                  "\2\12\10\0\1\12\13\0\2\12\5\0\4\12\4\0" +
                  "\1\137\11\12\1\140\1\12\1\141\4\12\1\142\4\12" +
                  "\4\0\2\12\10\0\1\12\13\0\2\12\5\0\4\12" +
                  "\4\0\14\12\1\143\11\12\4\0\2\12\10\0\1\12" +
                  "\13\0\2\12\5\0\4\12\4\0\5\12\1\144\5\12" +
                  "\1\145\12\12\4\0\2\12\10\0\1\12\13\0\2\12" +
                  "\5\0\4\12\4\0\4\12\1\146\7\12\1\147\11\12" +
                  "\4\0\2\12\10\0\1\12\13\0\2\12\5\0\4\12" +
                  "\4\0\4\12\1\150\7\12\1\151\11\12\4\0\2\12" +
                  "\10\0\1\12\13\0\2\12\5\0\4\12\4\0\5\12" +
                  "\1\152\10\12\1\153\7\12\4\0\2\12\10\0\1\12" +
                  "\13\0\2\12\5\0\4\12\4\0\16\12\1\154\7\12" +
                  "\4\0\2\12\10\0\1\12\13\0\2\12\5\0\4\12" +
                  "\4\0\4\12\1\155\21\12\4\0\2\12\10\0\1\12" +
                  "\13\0\2\12\5\0\4\12\4\0\7\12\1\156\1\157" +
                  "\7\12\1\160\2\12\1\161\2\12\4\0\2\12\10\0" +
                  "\1\12\13\0\2\12\5\0\4\12\4\0\16\12\1\162" +
                  "\7\12\4\0\2\12\10\0\1\12\13\0\2\12\5\0" +
                  "\4\12\4\0\13\12\1\163\12\12\4\0\2\12\10\0" +
                  "\1\12\13\0\2\12\5\0\4\12\4\0\14\12\1\164" +
                  "\11\12\4\0\2\12\10\0\1\12\13\0\2\12\5\0" +
                  "\4\12\4\0\7\12\1\165\16\12\4\0\2\12\10\0" +
                  "\1\12\13\0\2\12\5\0\4\12\4\0\14\12\1\166" +
                  "\11\12\4\0\1\12\2\67\1\0\2\67\1\0\2\67" +
                  "\1\0\30\67\1\0\35\67\2\0\1\70\74\0\2\167" +
                  "\4\0\2\167\1\170\3\167\1\170\24\167\1\170\3\167" +
                  "\1\170\3\167\1\170\5\167\1\170\2\167\1\170\1\167" +
                  "\1\170\11\167\1\0\2\167\4\0\2\167\1\74\3\167" +
                  "\1\74\24\167\1\74\3\167\1\74\3\167\1\74\5\167" +
                  "\1\74\2\167\1\74\1\167\1\74\11\167\26\0\2\106" +
                  "\6\0\1\113\12\0\1\116\1\113\25\0\17\107\1\171" +
                  "\57\107\2\110\1\172\2\110\1\173\71\110\23\0\1\106" +
                  "\1\0\2\112\6\0\1\113\12\0\1\116\1\113\75\0" +
                  "\1\116\53\0\1\174\1\175\5\0\2\175\6\0\6\175" +
                  "\45\0\1\176\1\0\1\176\2\0\1\177\1\200\50\0" +
                  "\1\12\10\0\1\12\13\0\2\12\5\0\4\12\4\0" +
                  "\3\12\1\201\22\12\4\0\2\12\10\0\1\12\13\0" +
                  "\2\12\5\0\4\12\4\0\20\12\1\202\5\12\4\0" +
                  "\2\12\10\0\1\12\13\0\2\12\5\0\4\12\4\0" +
                  "\6\12\1\203\17\12\4\0\2\12\10\0\1\12\13\0" +
                  "\2\12\5\0\4\12\4\0\14\12\1\204\11\12\4\0" +
                  "\2\12\10\0\1\12\13\0\2\12\5\0\4\12\4\0" +
                  "\4\12\1\205\21\12\4\0\2\12\10\0\1\12\13\0" +
                  "\2\12\5\0\4\12\4\0\17\12\1\206\6\12\4\0" +
                  "\2\12\10\0\1\12\13\0\2\12\5\0\4\12\4\0" +
                  "\1\207\25\12\4\0\2\12\10\0\1\12\13\0\2\12" +
                  "\5\0\4\12\4\0\13\12\1\210\12\12\4\0\2\12" +
                  "\10\0\1\12\13\0\2\12\5\0\4\12\4\0\5\12" +
                  "\1\211\20\12\4\0\2\12\10\0\1\12\13\0\2\12" +
                  "\5\0\4\12\4\0\21\12\1\212\4\12\4\0\2\12" +
                  "\10\0\1\12\13\0\2\12\5\0\4\12\4\0\17\12" +
                  "\1\213\6\12\4\0\2\12\10\0\1\12\13\0\2\12" +
                  "\5\0\4\12\4\0\3\12\1\214\22\12\4\0\2\12" +
                  "\10\0\1\12\13\0\2\12\5\0\4\12\4\0\12\12" +
                  "\1\215\13\12\4\0\2\12\10\0\1\12\13\0\2\12" +
                  "\5\0\4\12\4\0\14\12\1\216\11\12\4\0\2\12" +
                  "\10\0\1\12\13\0\2\12\5\0\4\12\4\0\16\12" +
                  "\1\217\7\12\4\0\2\12\10\0\1\12\13\0\2\12" +
                  "\5\0\4\12\4\0\13\12\1\220\12\12\4\0\2\12" +
                  "\10\0\1\12\13\0\2\12\5\0\4\12\4\0\20\12" +
                  "\1\221\5\12\4\0\2\12\10\0\1\12\13\0\2\12" +
                  "\5\0\4\12\4\0\15\12\1\222\2\12\1\223\5\12" +
                  "\4\0\2\12\10\0\1\12\13\0\2\12\5\0\4\12" +
                  "\4\0\13\12\1\224\12\12\4\0\2\12\10\0\1\12" +
                  "\13\0\2\12\5\0\4\12\4\0\13\12\1\225\12\12" +
                  "\4\0\2\12\10\0\1\12\13\0\2\12\5\0\4\12" +
                  "\4\0\23\12\1\226\2\12\4\0\2\12\10\0\1\12" +
                  "\13\0\2\12\5\0\4\12\4\0\20\12\1\227\5\12" +
                  "\4\0\2\12\10\0\1\12\13\0\2\12\5\0\4\12" +
                  "\4\0\10\12\1\230\15\12\4\0\2\12\10\0\1\12" +
                  "\13\0\2\12\5\0\4\12\4\0\2\12\1\231\12\12" +
                  "\1\232\2\12\1\233\5\12\4\0\2\12\10\0\1\12" +
                  "\13\0\2\12\5\0\4\12\4\0\14\12\1\234\11\12" +
                  "\4\0\2\12\10\0\1\12\13\0\2\12\5\0\4\12" +
                  "\4\0\6\12\1\235\16\12\1\236\4\0\2\12\10\0" +
                  "\1\12\13\0\2\12\5\0\4\12\4\0\1\237\15\12" +
                  "\1\240\7\12\4\0\2\12\10\0\1\12\13\0\2\12" +
                  "\5\0\4\12\4\0\10\12\1\241\15\12\4\0\2\12" +
                  "\10\0\1\12\13\0\2\12\5\0\4\12\4\0\21\12" +
                  "\1\242\4\12\4\0\2\12\10\0\1\12\13\0\2\12" +
                  "\5\0\4\12\4\0\20\12\1\243\5\12\4\0\2\12" +
                  "\10\0\1\12\13\0\2\12\5\0\4\12\4\0\10\12" +
                  "\1\244\1\12\1\245\13\12\4\0\2\12\10\0\1\12" +
                  "\13\0\2\12\5\0\4\12\4\0\10\12\1\246\15\12" +
                  "\4\0\2\12\10\0\1\12\13\0\2\12\5\0\4\12" +
                  "\4\0\16\12\1\247\7\12\4\0\1\12\17\107\1\171" +
                  "\4\107\1\172\52\107\2\0\1\172\121\0\2\250\5\0" +
                  "\2\250\6\0\6\250\47\0\1\251\2\0\1\177\1\200" +
                  "\75\0\2\200\50\0\1\12\10\0\1\12\13\0\2\12" +
                  "\5\0\4\12\4\0\14\12\1\252\11\12\4\0\2\12" +
                  "\10\0\1\12\13\0\2\12\5\0\4\12\4\0\10\12" +
                  "\1\253\15\12\4\0\2\12\10\0\1\12\13\0\2\12" +
                  "\5\0\4\12\4\0\12\12\1\254\13\12\4\0\2\12" +
                  "\10\0\1\12\13\0\2\12\5\0\4\12\4\0\1\255" +
                  "\25\12\4\0\2\12\10\0\1\12\13\0\2\12\5\0" +
                  "\4\12\4\0\4\12\1\256\21\12\4\0\2\12\10\0" +
                  "\1\12\13\0\2\12\5\0\4\12\4\0\16\12\1\223" +
                  "\7\12\4\0\2\12\10\0\1\12\13\0\2\12\5\0" +
                  "\4\12\4\0\17\12\1\257\1\260\5\12\4\0\2\12" +
                  "\10\0\1\12\13\0\2\12\5\0\4\12\4\0\1\261" +
                  "\25\12\4\0\2\12\10\0\1\12\13\0\2\12\5\0" +
                  "\4\12\4\0\1\12\1\262\24\12\4\0\2\12\10\0" +
                  "\1\12\13\0\2\12\5\0\4\12\4\0\4\12\1\263" +
                  "\21\12\4\0\2\12\10\0\1\12\13\0\2\12\5\0" +
                  "\4\12\4\0\17\12\1\264\6\12\4\0\2\12\10\0" +
                  "\1\12\13\0\2\12\5\0\4\12\4\0\1\265\25\12" +
                  "\4\0\2\12\10\0\1\12\13\0\2\12\5\0\4\12" +
                  "\4\0\4\12\1\266\21\12\4\0\2\12\10\0\1\12" +
                  "\13\0\2\12\5\0\4\12\4\0\2\12\1\267\23\12" +
                  "\4\0\2\12\10\0\1\12\13\0\2\12\5\0\4\12" +
                  "\4\0\14\12\1\270\11\12\4\0\2\12\10\0\1\12" +
                  "\13\0\2\12\5\0\4\12\4\0\21\12\1\271\4\12" +
                  "\4\0\2\12\10\0\1\12\13\0\2\12\5\0\4\12" +
                  "\4\0\6\12\1\223\17\12\4\0\2\12\10\0\1\12" +
                  "\13\0\2\12\5\0\4\12\4\0\13\12\1\272\12\12" +
                  "\4\0\2\12\10\0\1\12\13\0\2\12\5\0\4\12" +
                  "\4\0\14\12\1\273\11\12\4\0\2\12\10\0\1\12" +
                  "\13\0\2\12\5\0\4\12\4\0\4\12\1\274\21\12" +
                  "\4\0\2\12\10\0\1\12\13\0\2\12\5\0\4\12" +
                  "\4\0\21\12\1\275\4\12\4\0\2\12\10\0\1\12" +
                  "\13\0\2\12\5\0\4\12\4\0\16\12\1\265\7\12" +
                  "\4\0\2\12\10\0\1\12\13\0\2\12\5\0\4\12" +
                  "\4\0\13\12\1\276\12\12\4\0\2\12\10\0\1\12" +
                  "\13\0\2\12\5\0\4\12\4\0\4\12\1\277\21\12" +
                  "\4\0\2\12\10\0\1\12\13\0\2\12\5\0\4\12" +
                  "\4\0\16\12\1\300\1\12\1\301\5\12\4\0\2\12" +
                  "\10\0\1\12\13\0\2\12\5\0\4\12\4\0\10\12" +
                  "\1\302\15\12\4\0\2\12\10\0\1\12\13\0\2\12" +
                  "\5\0\4\12\4\0\20\12\1\303\5\12\4\0\2\12" +
                  "\10\0\1\12\13\0\2\12\5\0\4\12\4\0\4\12" +
                  "\1\304\21\12\4\0\2\12\10\0\1\12\13\0\2\12" +
                  "\5\0\4\12\4\0\10\12\1\305\15\12\4\0\2\12" +
                  "\10\0\1\12\13\0\2\12\5\0\4\12\4\0\3\12" +
                  "\1\306\22\12\4\0\2\12\10\0\1\12\13\0\2\12" +
                  "\5\0\4\12\4\0\1\307\25\12\4\0\2\12\10\0" +
                  "\1\12\13\0\2\12\5\0\4\12\4\0\12\12\1\310" +
                  "\13\12\4\0\1\12\25\0\2\311\5\0\2\311\6\0" +
                  "\6\311\52\0\1\177\1\200\50\0\1\12\10\0\1\12" +
                  "\13\0\2\12\5\0\4\12\4\0\13\12\1\312\12\12" +
                  "\4\0\2\12\10\0\1\12\13\0\2\12\5\0\4\12" +
                  "\4\0\11\12\1\313\14\12\4\0\2\12\10\0\1\12" +
                  "\13\0\2\12\5\0\4\12\4\0\20\12\1\314\5\12" +
                  "\4\0\2\12\10\0\1\12\13\0\2\12\5\0\4\12" +
                  "\4\0\10\12\1\315\15\12\4\0\2\12\10\0\1\12" +
                  "\13\0\2\12\5\0\4\12\4\0\21\12\1\316\4\12" +
                  "\4\0\2\12\10\0\1\12\13\0\2\12\5\0\4\12" +
                  "\4\0\12\12\1\317\13\12\4\0\2\12\10\0\1\12" +
                  "\13\0\2\12\5\0\4\12\4\0\4\12\1\320\21\12" +
                  "\4\0\2\12\10\0\1\12\13\0\2\12\5\0\4\12" +
                  "\4\0\20\12\1\223\5\12\4\0\2\12\10\0\1\12" +
                  "\13\0\2\12\5\0\4\12\4\0\1\321\25\12\4\0" +
                  "\2\12\10\0\1\12\13\0\2\12\5\0\4\12\4\0" +
                  "\20\12\1\322\5\12\4\0\2\12\10\0\1\12\13\0" +
                  "\2\12\5\0\4\12\4\0\20\12\1\323\5\12\4\0" +
                  "\2\12\10\0\1\12\13\0\2\12\5\0\4\12\4\0" +
                  "\20\12\1\324\5\12\4\0\2\12\10\0\1\12\13\0" +
                  "\2\12\5\0\4\12\4\0\16\12\1\325\7\12\4\0" +
                  "\2\12\10\0\1\12\13\0\2\12\5\0\4\12\4\0" +
                  "\1\326\25\12\4\0\2\12\10\0\1\12\13\0\2\12" +
                  "\5\0\4\12\4\0\16\12\1\327\7\12\4\0\2\12" +
                  "\10\0\1\12\13\0\2\12\5\0\4\12\4\0\4\12" +
                  "\1\330\21\12\4\0\2\12\10\0\1\12\13\0\2\12" +
                  "\5\0\4\12\4\0\14\12\1\331\11\12\4\0\2\12" +
                  "\10\0\1\12\13\0\2\12\5\0\4\12\4\0\20\12" +
                  "\1\332\5\12\4\0\2\12\10\0\1\12\13\0\2\12" +
                  "\5\0\4\12\4\0\10\12\1\333\15\12\4\0\2\12" +
                  "\10\0\1\12\13\0\2\12\5\0\4\12\4\0\13\12" +
                  "\1\334\12\12\4\0\2\12\10\0\1\12\13\0\2\12" +
                  "\5\0\4\12\4\0\2\12\1\335\23\12\4\0\2\12" +
                  "\10\0\1\12\13\0\2\12\5\0\4\12\4\0\12\12" +
                  "\1\336\13\12\4\0\2\12\10\0\1\12\13\0\2\12" +
                  "\5\0\4\12\4\0\20\12\1\337\5\12\4\0\2\12" +
                  "\10\0\1\12\13\0\2\12\5\0\4\12\4\0\4\12" +
                  "\1\340\21\12\4\0\1\12\25\0\2\341\5\0\2\341" +
                  "\6\0\6\341\25\0\1\12\10\0\1\12\13\0\2\12" +
                  "\5\0\4\12\4\0\13\12\1\342\12\12\4\0\2\12" +
                  "\10\0\1\12\13\0\2\12\5\0\4\12\4\0\12\12" +
                  "\1\343\13\12\4\0\2\12\10\0\1\12\13\0\2\12" +
                  "\5\0\4\12\4\0\4\12\1\223\21\12\4\0\2\12" +
                  "\10\0\1\12\13\0\2\12\5\0\4\12\4\0\2\12" +
                  "\1\344\23\12\4\0\2\12\10\0\1\12\13\0\2\12" +
                  "\5\0\4\12\4\0\10\12\1\345\15\12\4\0\2\12" +
                  "\10\0\1\12\13\0\2\12\5\0\4\12\4\0\12\12" +
                  "\1\346\13\12\4\0\2\12\10\0\1\12\13\0\2\12" +
                  "\5\0\4\12\4\0\3\12\1\347\22\12\4\0\2\12" +
                  "\10\0\1\12\13\0\2\12\5\0\4\12\4\0\20\12" +
                  "\1\350\5\12\4\0\2\12\10\0\1\12\13\0\2\12" +
                  "\5\0\4\12\4\0\13\12\1\351\12\12\4\0\2\12" +
                  "\10\0\1\12\13\0\2\12\5\0\4\12\4\0\3\12" +
                  "\1\352\22\12\4\0\2\12\10\0\1\12\13\0\2\12" +
                  "\5\0\4\12\4\0\5\12\1\353\20\12\4\0\2\12" +
                  "\10\0\1\12\13\0\2\12\5\0\4\12\4\0\2\12" +
                  "\1\354\23\12\4\0\2\12\10\0\1\12\13\0\2\12" +
                  "\5\0\4\12\4\0\6\12\1\254\17\12\4\0\2\12" +
                  "\10\0\1\12\13\0\2\12\5\0\4\12\4\0\7\12" +
                  "\1\355\16\12\4\0\2\12\10\0\1\12\13\0\2\12" +
                  "\5\0\4\12\4\0\10\12\1\356\15\12\4\0\1\12" +
                  "\25\0\2\357\5\0\2\357\6\0\6\357\25\0\1\12" +
                  "\10\0\1\12\13\0\2\12\5\0\4\12\4\0\21\12" +
                  "\1\360\4\12\4\0\2\12\10\0\1\12\13\0\2\12" +
                  "\5\0\4\12\4\0\20\12\1\361\5\12\4\0\2\12" +
                  "\10\0\1\12\13\0\2\12\5\0\4\12\4\0\7\12" +
                  "\1\362\16\12\4\0\2\12\10\0\1\12\13\0\2\12" +
                  "\5\0\4\12\4\0\14\12\1\363\11\12\4\0\2\12" +
                  "\10\0\1\12\13\0\2\12\5\0\4\12\4\0\13\12" +
                  "\1\364\12\12\4\0\2\12\10\0\1\12\13\0\2\12" +
                  "\5\0\4\12\4\0\12\12\1\365\13\12\4\0\1\12" +
                  "\25\0\2\366\5\0\2\366\6\0\6\366\25\0\1\12" +
                  "\10\0\1\12\13\0\2\12\5\0\4\12\4\0\4\12" +
                  "\1\367\21\12\4\0\2\12\10\0\1\12\13\0\2\12" +
                  "\5\0\4\12\4\0\13\12\1\370\12\12\4\0\2\12" +
                  "\10\0\1\12\13\0\2\12\5\0\4\12\4\0\4\12" +
                  "\1\371\21\12\4\0\1\12\25\0\2\372\5\0\2\372" +
                  "\6\0\6\372\52\0\2\373\5\0\2\373\6\0\6\373" +
                  "\25\0";

  private static int [] zzUnpackTrans() {
    int[] result = new int[10899];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
          "\3\0\3\11\2\1\1\11\1\1\5\11\2\1\1\11" +
                  "\5\1\2\11\3\1\1\11\1\1\1\11\23\1\4\11" +
                  "\1\1\1\11\1\1\1\11\1\1\2\11\1\1\5\11" +
                  "\1\0\1\11\1\1\1\0\1\1\1\11\2\1\1\11" +
                  "\2\0\4\11\44\1\2\11\1\0\1\11\3\1\1\0" +
                  "\1\11\51\1\1\0\121\1\1\11";

  private static int [] zzUnpackAttribute() {
    int[] result = new int[251];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    StringBuilder stringBuilder = new StringBuilder();
    boolean record_dcl = false;
    boolean record_id_dcl = false;
    LinkedHashSet<String> record_ids = new LinkedHashSet<>();
    LinkedHashSet<String> record_types = new LinkedHashSet<>();
    private Symbol currentSymbol = null;
    public Symbol currentToken() {
            return currentSymbol;
        }
    public String nextToken() {
        try {
            currentSymbol = next_token();
            return currentSymbol.getToken();
        } catch (IOException e) {
            throw new RuntimeException("Unable to get next token", e);
        }
    }
    private Double getValueForSN(String text){
        int index = text.indexOf("e");
        Double value;
        if(index > 0){
            int base = Integer.parseInt(text.substring(0, index));
            int exp = Integer.parseInt(text.substring(index + 1));
            value = base * Math.pow(10, exp);
        }else if(index < 0)
            value = Double.parseDouble(text);
        else
            throw new NumberFormatException();
        return value;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return (new Symbol("$"));
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: {
            throw new RuntimeException("Illegal character \"" + yytext() +
                    "\" at line " + yyline + ", column " + yycolumn);
          }
          // fall through
          case 94:
            break;
          case 2: { /*ignore WhiteCharacter*/
          }
          // fall through
          case 95:
            break;
          case 3: { /*ignore LineTerminator*/
          }
          // fall through
          case 96:
            break;
          case 4: {
            yybegin(STRING);
            stringBuilder.setLength(0);
            stringBuilder.append("\"");
          }
          // fall through
          case 97:
            break;
          case 5: {
            String id = yytext();
            if (record_types.contains(id)) {
              record_dcl = false;
              record_id_dcl = true;
              return (new Symbol("record_type", id));

            }
            if (record_dcl) {
              record_types.add(id);
              record_dcl = false;
                                         return (new Symbol("record_type",id));
                                     }
                                     if(record_ids.contains(id)){
                                          record_id_dcl = false;
                                          return (new Symbol("record_id",id));
                                     }
            if (record_id_dcl) {
              record_id_dcl = false;
              record_ids.add(id);
              return (new Symbol("record_id", id));
            }
            return (new Symbol("id", id));
          }
          // fall through
          case 98:
            break;
          case 6: {
            return (new Symbol("%"));
          }
          // fall through
          case 99:
            break;
          case 7: {
            return (new Symbol("&"));
          }
          // fall through
          case 100:
            break;
          case 8: {
            yybegin(CHAR);
            stringBuilder.setLength(0);
            stringBuilder.append("'");
          }
          // fall through
          case 101:
            break;
          case 9: {
            return (new Symbol("("));
          }
          // fall through
          case 102:
            break;
          case 10: {
            return (new Symbol(")"));
          }
          // fall through
          case 103:
            break;
          case 11: {
            return (new Symbol("*"));
          }
          // fall through
          case 104:
            break;
          case 12: {
            return (new Symbol("+"));
          }
          // fall through
          case 105:
            break;
          case 13: {
            return (new Symbol("comma"));
          }
          // fall through
          case 106:
            break;
          case 14: {
            return (new Symbol("-"));
          }
          // fall through
          case 107:
            break;
          case 15: {
            return (new Symbol("."));
          }
          // fall through
          case 108:
            break;
          case 16: {
            return (new Symbol("/"));
          }
          // fall through
          case 109:
            break;
          case 17: {
            return (new Symbol("dec", Integer.valueOf(yytext())));
          }
          // fall through
          case 110:
            break;
          case 18: {
            return (new Symbol(":"));
          }
          // fall through
          case 111:
            break;
          case 19: {
            return (new Symbol(";"));
          }
          // fall through
          case 112:
            break;
          case 20: {
            return (new Symbol("<"));
          }
          // fall through
          case 113:
            break;
          case 21: {
            return (new Symbol("="));
          }
          // fall through
          case 114:
            break;
          case 22: {
            return (new Symbol(">"));
          }
          // fall through
          case 115:
            break;
          case 23: {
            return (new Symbol("["));
          }
          // fall through
          case 116:
            break;
          case 24: {
            return (new Symbol("]"));
          }
          // fall through
          case 117:
            break;
          case 25: {
            return (new Symbol("^"));
          }
          // fall through
          case 118:
            break;
          case 26: {
            return (new Symbol("bracket_open"));
          }
          // fall through
          case 119:
            break;
          case 27: {
            return (new Symbol("|"));
          }
          // fall through
          case 120:
            break;
          case 28: {
            return (new Symbol("bracket_close"));
          }
          // fall through
          case 121:
            break;
          case 29: {
            return (new Symbol("tilda"));
          }
          // fall through
          case 122:
            break;
          case 30: {
            stringBuilder.append(yytext());
          }
          // fall through
          case 123:
            break;
          case 31: {
            throw new RuntimeException("Unexpected End Of Line");
          }
          // fall through
          case 124:
            break;
          case 32: {
            yybegin(YYINITIAL);
            stringBuilder.append("\"");
            StringBuilder sb = stringBuilder;
            stringBuilder = new StringBuilder();
            return (new Symbol("string", sb.toString()));
          }
          // fall through
          case 125:
            break;
          case 33: {
            return (new Symbol("char", yytext().charAt(0)));
          }
          // fall through
          case 126:
            break;
          case 34: {
            yybegin(YYINITIAL);
          }
          // fall through
          case 127:
            break;
          case 35: {
            return (new Symbol("!="));
          }
          // fall through
          case 128:
            break;
          case 36: {
            return (new Symbol("*="));
          }
          // fall through
          case 129:
            break;
          case 37: {
            return (new Symbol("++"));
          }
          // fall through
          case 130:
            break;
          case 38: {
            return (new Symbol("+="));
          }
          // fall through
          case 131:
            break;
          case 39: {
            return (new Symbol("--"));
          }
          // fall through
          case 132:
            break;
          case 40: {
            return (new Symbol("-="));
          }
          // fall through
          case 133:
            break;
          case 41: {
            return (new Symbol("double", Double.valueOf(yytext())));
          }
          // fall through
          case 134:
            break;
          case 42: { /*ignore Comment*/
          }
          // fall through
          case 135:
            break;
          case 43: {
            return (new Symbol("/="));
          }
          // fall through
          case 136:
            break;
          case 44: {
            return (new Symbol("float", Float.valueOf(yytext())));
          }
          // fall through
          case 137:
            break;
          case 45: {
            String temp = (String) yytext();
            temp = temp.substring(0, temp.length() - 1);
            return (new Symbol("long_dec", Long.valueOf(temp)));
          }
          // fall through
          case 138:
            break;
          case 46: {
            return (new Symbol("<="));
          }
          // fall through
          case 139:
            break;
          case 47: {
            return (new Symbol("=="));
          }
          // fall through
          case 140:
            break;
          case 48: {
            return (new Symbol(">="));
          }
          // fall through
          case 141:
            break;
          case 49: {
            return (new Symbol("]["));
          }
          // fall through
          case 142:
            break;
          case 50: {
            return (new Symbol("do"));
          }
          // fall through
          case 143:
            break;
          case 51: {
            return (new Symbol("if"));
          }
          // fall through
          case 144:
            break;
          case 52: {
            return (new Symbol("in"));
          }
          // fall through
          case 145:
            break;
          case 53: {
            return new Symbol("of");
          }
          // fall through
          case 146:
            break;
          case 54: {
            return (new Symbol("or"));
          }
          // fall through
          case 147:
            break;
          case 55: {
            throw new RuntimeException("Unexpected Escape \"" + yytext() + "\"");
          }
          // fall through
          case 148:
            break;
          case 56: {
            return (new Symbol("hex", Long.valueOf(yytext())));
          }
          // fall through
          case 149:
            break;
          case 57: {
            return (new Symbol("sc_not", getValueForSN(yytext())));
          }
          // fall through
          case 150:
            break;
          case 58: {
            return (new Symbol("and"));
          }
          // fall through
          case 151:
            break;
          case 59: {
            return (new Symbol("end"));
          }
          // fall through
          case 152:
            break;
          case 60: {
            return (new Symbol("for"));
          }
          // fall through
          case 153:
            break;
          case 61: {
            return (new Symbol("type", yytext()));
          }
          // fall through
          case 154:
            break;
          case 62: {
            return (new Symbol("len"));
          }
          // fall through
          case 155:
            break;
          case 63: {
            return (new Symbol("new"));
          }
          // fall through
          case 156:
            break;
          case 64: {
            return (new Symbol("not"));
          }
          // fall through
          case 157:
            break;
          case 65: {
            return new Symbol("xor");
          }
          // fall through
          case 158:
            break;
          case 66: {
            return (new Symbol("auto"));
          }
          // fall through
          case 159:
            break;
          case 67: {
            return (new Symbol("type", yytext()));
          }
          // fall through
          case 160:
            break;
          case 68: {
            return (new Symbol("case"));
          }
          // fall through
          case 161:
            break;
          case 69: {
            return (new Symbol("else"));
          }
          // fall through
          case 162:
            break;
          case 70: {
            return (new Symbol("goto"));
          }
          // fall through
          case 163:
            break;
          case 71: {
            return (new Symbol("true", Boolean.valueOf(yytext())));
          }
          // fall through
          case 164:
            break;
          case 72: {
            return (new Symbol("void"));
          }
          // fall through
          case 165:
            break;
          case 73: {
            return (new Symbol("begin"));
          }
          // fall through
          case 166:
            break;
          case 74: {
            return (new Symbol("break"));
          }
          // fall through
          case 167:
            break;
          case 75: {
            return (new Symbol("const"));
          }
          // fall through
          case 168:
            break;
          case 76: {
            return (new Symbol("false", Boolean.valueOf(yytext())));
          }
          // fall through
          case 169:
            break;
          case 77: {
            return (new Symbol("input"));
          }
          // fall through
          case 170:
            break;
          case 78: {
            return (new Symbol("start"));
          }
          // fall through
          case 171:
            break;
          case 79: {
            return (new Symbol("until"));
          }
          // fall through
          case 172:
            break;
          case 80: {
            return (new Symbol("while"));
          }
          // fall through
          case 173:
            break;
          case 81: {
            record_dcl = true;
            return (new Symbol("record"));
          }
          // fall through
          case 174:
            break;
          case 82: {
            return (new Symbol("repeat"));
          }
          // fall through
          case 175:
            break;
          case 83: {
            return (new Symbol("return"));
          }
          // fall through
          case 176:
            break;
          case 84: {
            return (new Symbol("signed"));
          }
          // fall through
          case 177:
            break;
          case 85: {
            return (new Symbol("sizeof"));
          }
          // fall through
          case 178:
            break;
          case 86: {
            return (new Symbol("static"));
          }
          // fall through
          case 179:
            break;
          case 87: {
            return (new Symbol("switch"));
          }
          // fall through
          case 180:
            break;
          case 88: {
            return (new Symbol("default"));
          }
          // fall through
          case 181:
            break;
          case 89: {
            return (new Symbol("foreach"));
          }
          // fall through
          case 182:
            break;
          case 90: {
            return (new Symbol("println"));
          }
          // fall through
          case 183:
            break;
          case 91: {
            return (new Symbol("continue"));
          }
          // fall through
          case 184:
            break;
          case 92: {
            return (new Symbol("function"));
          }
          // fall through
          case 185:
            break;
          case 93: {
            return (new Symbol("volatile"));
          }
          // fall through
          case 186:
            break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
